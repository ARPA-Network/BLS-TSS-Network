# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import management_pb2 as management__pb2


class ManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFixedTasks = channel.unary_unary(
                '/management.ManagementService/ListFixedTasks',
                request_serializer=management__pb2.ListFixedTasksRequest.SerializeToString,
                response_deserializer=management__pb2.ListFixedTasksReply.FromString,
                )
        self.StartListener = channel.unary_unary(
                '/management.ManagementService/StartListener',
                request_serializer=management__pb2.StartListenerRequest.SerializeToString,
                response_deserializer=management__pb2.StartListenerReply.FromString,
                )
        self.ShutdownListener = channel.unary_unary(
                '/management.ManagementService/ShutdownListener',
                request_serializer=management__pb2.ShutdownListenerRequest.SerializeToString,
                response_deserializer=management__pb2.ShutdownListenerReply.FromString,
                )
        self.NodeRegister = channel.unary_unary(
                '/management.ManagementService/NodeRegister',
                request_serializer=management__pb2.NodeRegisterRequest.SerializeToString,
                response_deserializer=management__pb2.NodeRegisterReply.FromString,
                )
        self.NodeActivate = channel.unary_unary(
                '/management.ManagementService/NodeActivate',
                request_serializer=management__pb2.NodeActivateRequest.SerializeToString,
                response_deserializer=management__pb2.NodeActivateReply.FromString,
                )
        self.NodeQuit = channel.unary_unary(
                '/management.ManagementService/NodeQuit',
                request_serializer=management__pb2.NodeQuitRequest.SerializeToString,
                response_deserializer=management__pb2.NodeQuitReply.FromString,
                )
        self.ShutdownNode = channel.unary_unary(
                '/management.ManagementService/ShutdownNode',
                request_serializer=management__pb2.ShutdownNodeRequest.SerializeToString,
                response_deserializer=management__pb2.ShutdownNodeReply.FromString,
                )
        self.GetNodeInfo = channel.unary_unary(
                '/management.ManagementService/GetNodeInfo',
                request_serializer=management__pb2.GetNodeInfoRequest.SerializeToString,
                response_deserializer=management__pb2.GetNodeInfoReply.FromString,
                )
        self.GetGroupInfo = channel.unary_unary(
                '/management.ManagementService/GetGroupInfo',
                request_serializer=management__pb2.GetGroupInfoRequest.SerializeToString,
                response_deserializer=management__pb2.GetGroupInfoReply.FromString,
                )
        self.PostProcessDkg = channel.unary_unary(
                '/management.ManagementService/PostProcessDkg',
                request_serializer=management__pb2.PostProcessDkgRequest.SerializeToString,
                response_deserializer=management__pb2.PostProcessDkgReply.FromString,
                )
        self.PartialSign = channel.unary_unary(
                '/management.ManagementService/PartialSign',
                request_serializer=management__pb2.PartialSignRequest.SerializeToString,
                response_deserializer=management__pb2.PartialSignReply.FromString,
                )
        self.AggregatePartialSigs = channel.unary_unary(
                '/management.ManagementService/AggregatePartialSigs',
                request_serializer=management__pb2.AggregatePartialSigsRequest.SerializeToString,
                response_deserializer=management__pb2.AggregatePartialSigsReply.FromString,
                )
        self.VerifySig = channel.unary_unary(
                '/management.ManagementService/VerifySig',
                request_serializer=management__pb2.VerifySigRequest.SerializeToString,
                response_deserializer=management__pb2.VerifySigReply.FromString,
                )
        self.VerifyPartialSigs = channel.unary_unary(
                '/management.ManagementService/VerifyPartialSigs',
                request_serializer=management__pb2.VerifyPartialSigsRequest.SerializeToString,
                response_deserializer=management__pb2.VerifyPartialSigsReply.FromString,
                )
        self.SendPartialSig = channel.unary_unary(
                '/management.ManagementService/SendPartialSig',
                request_serializer=management__pb2.SendPartialSigRequest.SerializeToString,
                response_deserializer=management__pb2.SendPartialSigReply.FromString,
                )
        self.FulfillRandomness = channel.unary_unary(
                '/management.ManagementService/FulfillRandomness',
                request_serializer=management__pb2.FulfillRandomnessRequest.SerializeToString,
                response_deserializer=management__pb2.FulfillRandomnessReply.FromString,
                )


class ManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFixedTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartListener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownListener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeActivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeQuit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostProcessDkg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartialSign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregatePartialSigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifySig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyPartialSigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPartialSig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FulfillRandomness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFixedTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFixedTasks,
                    request_deserializer=management__pb2.ListFixedTasksRequest.FromString,
                    response_serializer=management__pb2.ListFixedTasksReply.SerializeToString,
            ),
            'StartListener': grpc.unary_unary_rpc_method_handler(
                    servicer.StartListener,
                    request_deserializer=management__pb2.StartListenerRequest.FromString,
                    response_serializer=management__pb2.StartListenerReply.SerializeToString,
            ),
            'ShutdownListener': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownListener,
                    request_deserializer=management__pb2.ShutdownListenerRequest.FromString,
                    response_serializer=management__pb2.ShutdownListenerReply.SerializeToString,
            ),
            'NodeRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRegister,
                    request_deserializer=management__pb2.NodeRegisterRequest.FromString,
                    response_serializer=management__pb2.NodeRegisterReply.SerializeToString,
            ),
            'NodeActivate': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeActivate,
                    request_deserializer=management__pb2.NodeActivateRequest.FromString,
                    response_serializer=management__pb2.NodeActivateReply.SerializeToString,
            ),
            'NodeQuit': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeQuit,
                    request_deserializer=management__pb2.NodeQuitRequest.FromString,
                    response_serializer=management__pb2.NodeQuitReply.SerializeToString,
            ),
            'ShutdownNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownNode,
                    request_deserializer=management__pb2.ShutdownNodeRequest.FromString,
                    response_serializer=management__pb2.ShutdownNodeReply.SerializeToString,
            ),
            'GetNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInfo,
                    request_deserializer=management__pb2.GetNodeInfoRequest.FromString,
                    response_serializer=management__pb2.GetNodeInfoReply.SerializeToString,
            ),
            'GetGroupInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupInfo,
                    request_deserializer=management__pb2.GetGroupInfoRequest.FromString,
                    response_serializer=management__pb2.GetGroupInfoReply.SerializeToString,
            ),
            'PostProcessDkg': grpc.unary_unary_rpc_method_handler(
                    servicer.PostProcessDkg,
                    request_deserializer=management__pb2.PostProcessDkgRequest.FromString,
                    response_serializer=management__pb2.PostProcessDkgReply.SerializeToString,
            ),
            'PartialSign': grpc.unary_unary_rpc_method_handler(
                    servicer.PartialSign,
                    request_deserializer=management__pb2.PartialSignRequest.FromString,
                    response_serializer=management__pb2.PartialSignReply.SerializeToString,
            ),
            'AggregatePartialSigs': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregatePartialSigs,
                    request_deserializer=management__pb2.AggregatePartialSigsRequest.FromString,
                    response_serializer=management__pb2.AggregatePartialSigsReply.SerializeToString,
            ),
            'VerifySig': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifySig,
                    request_deserializer=management__pb2.VerifySigRequest.FromString,
                    response_serializer=management__pb2.VerifySigReply.SerializeToString,
            ),
            'VerifyPartialSigs': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyPartialSigs,
                    request_deserializer=management__pb2.VerifyPartialSigsRequest.FromString,
                    response_serializer=management__pb2.VerifyPartialSigsReply.SerializeToString,
            ),
            'SendPartialSig': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPartialSig,
                    request_deserializer=management__pb2.SendPartialSigRequest.FromString,
                    response_serializer=management__pb2.SendPartialSigReply.SerializeToString,
            ),
            'FulfillRandomness': grpc.unary_unary_rpc_method_handler(
                    servicer.FulfillRandomness,
                    request_deserializer=management__pb2.FulfillRandomnessRequest.FromString,
                    response_serializer=management__pb2.FulfillRandomnessReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'management.ManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFixedTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/ListFixedTasks',
            management__pb2.ListFixedTasksRequest.SerializeToString,
            management__pb2.ListFixedTasksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/StartListener',
            management__pb2.StartListenerRequest.SerializeToString,
            management__pb2.StartListenerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/ShutdownListener',
            management__pb2.ShutdownListenerRequest.SerializeToString,
            management__pb2.ShutdownListenerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/NodeRegister',
            management__pb2.NodeRegisterRequest.SerializeToString,
            management__pb2.NodeRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeActivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/NodeActivate',
            management__pb2.NodeActivateRequest.SerializeToString,
            management__pb2.NodeActivateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeQuit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/NodeQuit',
            management__pb2.NodeQuitRequest.SerializeToString,
            management__pb2.NodeQuitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/ShutdownNode',
            management__pb2.ShutdownNodeRequest.SerializeToString,
            management__pb2.ShutdownNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/GetNodeInfo',
            management__pb2.GetNodeInfoRequest.SerializeToString,
            management__pb2.GetNodeInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/GetGroupInfo',
            management__pb2.GetGroupInfoRequest.SerializeToString,
            management__pb2.GetGroupInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostProcessDkg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/PostProcessDkg',
            management__pb2.PostProcessDkgRequest.SerializeToString,
            management__pb2.PostProcessDkgReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PartialSign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/PartialSign',
            management__pb2.PartialSignRequest.SerializeToString,
            management__pb2.PartialSignReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregatePartialSigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/AggregatePartialSigs',
            management__pb2.AggregatePartialSigsRequest.SerializeToString,
            management__pb2.AggregatePartialSigsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifySig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/VerifySig',
            management__pb2.VerifySigRequest.SerializeToString,
            management__pb2.VerifySigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyPartialSigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/VerifyPartialSigs',
            management__pb2.VerifyPartialSigsRequest.SerializeToString,
            management__pb2.VerifyPartialSigsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPartialSig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/SendPartialSig',
            management__pb2.SendPartialSigRequest.SerializeToString,
            management__pb2.SendPartialSigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FulfillRandomness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/management.ManagementService/FulfillRandomness',
            management__pb2.FulfillRandomnessRequest.SerializeToString,
            management__pb2.FulfillRandomnessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
